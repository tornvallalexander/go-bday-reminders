// Code generated by MockGen. DO NOT EDIT.
// Source: go-bday-reminders/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "go-bday-reminders/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateBirthday mocks base method.
func (m *MockStore) CreateBirthday(arg0 context.Context, arg1 db.CreateBirthdayParams) (db.Birthday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBirthday", arg0, arg1)
	ret0, _ := ret[0].(db.Birthday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBirthday indicates an expected call of CreateBirthday.
func (mr *MockStoreMockRecorder) CreateBirthday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBirthday", reflect.TypeOf((*MockStore)(nil).CreateBirthday), arg0, arg1)
}

// DeleteBirthday mocks base method.
func (m *MockStore) DeleteBirthday(arg0 context.Context, arg1 int64) (db.Birthday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBirthday", arg0, arg1)
	ret0, _ := ret[0].(db.Birthday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBirthday indicates an expected call of DeleteBirthday.
func (mr *MockStoreMockRecorder) DeleteBirthday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBirthday", reflect.TypeOf((*MockStore)(nil).DeleteBirthday), arg0, arg1)
}

// GetBirthday mocks base method.
func (m *MockStore) GetBirthday(arg0 context.Context, arg1 int64) (db.Birthday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBirthday", arg0, arg1)
	ret0, _ := ret[0].(db.Birthday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBirthday indicates an expected call of GetBirthday.
func (mr *MockStoreMockRecorder) GetBirthday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBirthday", reflect.TypeOf((*MockStore)(nil).GetBirthday), arg0, arg1)
}

// ListBirthdays mocks base method.
func (m *MockStore) ListBirthdays(arg0 context.Context, arg1 db.ListBirthdaysParams) ([]db.Birthday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBirthdays", arg0, arg1)
	ret0, _ := ret[0].([]db.Birthday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBirthdays indicates an expected call of ListBirthdays.
func (mr *MockStoreMockRecorder) ListBirthdays(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBirthdays", reflect.TypeOf((*MockStore)(nil).ListBirthdays), arg0, arg1)
}

// UpdateBirthday mocks base method.
func (m *MockStore) UpdateBirthday(arg0 context.Context, arg1 db.UpdateBirthdayParams) (db.Birthday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBirthday", arg0, arg1)
	ret0, _ := ret[0].(db.Birthday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBirthday indicates an expected call of UpdateBirthday.
func (mr *MockStoreMockRecorder) UpdateBirthday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBirthday", reflect.TypeOf((*MockStore)(nil).UpdateBirthday), arg0, arg1)
}
