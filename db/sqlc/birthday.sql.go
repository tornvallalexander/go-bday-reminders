// Code generated by sqlc. DO NOT EDIT.
// source: birthday.sql

package db

import (
	"context"
	"time"
)

const createBirthday = `-- name: CreateBirthday :one
INSERT INTO birthdays (
    full_name,
    future_birthday
) VALUES (
   $1, $2
) RETURNING id, full_name, future_birthday
`

type CreateBirthdayParams struct {
	FullName       string    `json:"full_name"`
	FutureBirthday time.Time `json:"future_birthday"`
}

func (q *Queries) CreateBirthday(ctx context.Context, arg CreateBirthdayParams) (Birthday, error) {
	row := q.db.QueryRowContext(ctx, createBirthday, arg.FullName, arg.FutureBirthday)
	var i Birthday
	err := row.Scan(&i.ID, &i.FullName, &i.FutureBirthday)
	return i, err
}

const deleteBirthday = `-- name: DeleteBirthday :one
DELETE FROM birthdays
WHERE id = $1
RETURNING id, full_name, future_birthday
`

func (q *Queries) DeleteBirthday(ctx context.Context, id int64) (Birthday, error) {
	row := q.db.QueryRowContext(ctx, deleteBirthday, id)
	var i Birthday
	err := row.Scan(&i.ID, &i.FullName, &i.FutureBirthday)
	return i, err
}

const getBirthday = `-- name: GetBirthday :one
SELECT id, full_name, future_birthday FROM birthdays
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBirthday(ctx context.Context, id int64) (Birthday, error) {
	row := q.db.QueryRowContext(ctx, getBirthday, id)
	var i Birthday
	err := row.Scan(&i.ID, &i.FullName, &i.FutureBirthday)
	return i, err
}

const listBirthdays = `-- name: ListBirthdays :many
SELECT id, full_name, future_birthday FROM birthdays
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBirthdaysParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBirthdays(ctx context.Context, arg ListBirthdaysParams) ([]Birthday, error) {
	rows, err := q.db.QueryContext(ctx, listBirthdays, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Birthday{}
	for rows.Next() {
		var i Birthday
		if err := rows.Scan(&i.ID, &i.FullName, &i.FutureBirthday); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBirthday = `-- name: UpdateBirthday :one
UPDATE birthdays
SET future_birthday = $2
WHERE id = $1
RETURNING id, full_name, future_birthday
`

type UpdateBirthdayParams struct {
	ID             int64     `json:"id"`
	FutureBirthday time.Time `json:"future_birthday"`
}

func (q *Queries) UpdateBirthday(ctx context.Context, arg UpdateBirthdayParams) (Birthday, error) {
	row := q.db.QueryRowContext(ctx, updateBirthday, arg.ID, arg.FutureBirthday)
	var i Birthday
	err := row.Scan(&i.ID, &i.FullName, &i.FutureBirthday)
	return i, err
}
