// Code generated by sqlc. DO NOT EDIT.
// source: reminder.sql

package db

import (
	"context"
)

const createReminder = `-- name: CreateReminder :one
INSERT INTO reminders (full_name, personal_number, "user", phone_number) VALUES ($1, $2, $3, $4) RETURNING id, full_name, personal_number, "user", phone_number, created_at
`

type CreateReminderParams struct {
	FullName       string `json:"full_name"`
	PersonalNumber int64  `json:"personal_number"`
	User           string `json:"user"`
	PhoneNumber    string `json:"phone_number"`
}

func (q *Queries) CreateReminder(ctx context.Context, arg CreateReminderParams) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, createReminder,
		arg.FullName,
		arg.PersonalNumber,
		arg.User,
		arg.PhoneNumber,
	)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PersonalNumber,
		&i.User,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReminder = `-- name: DeleteReminder :one
DELETE FROM reminders
WHERE id = $1
RETURNING id, full_name, personal_number, "user", phone_number, created_at
`

func (q *Queries) DeleteReminder(ctx context.Context, id int64) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, deleteReminder, id)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PersonalNumber,
		&i.User,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}

const getReminder = `-- name: GetReminder :one
SELECT id, full_name, personal_number, "user", phone_number, created_at FROM reminders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReminder(ctx context.Context, id int64) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, getReminder, id)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PersonalNumber,
		&i.User,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}

const listReminders = `-- name: ListReminders :many
SELECT id, full_name, personal_number, "user", phone_number, created_at FROM reminders
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRemindersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReminders(ctx context.Context, arg ListRemindersParams) ([]Reminder, error) {
	rows, err := q.db.QueryContext(ctx, listReminders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reminder{}
	for rows.Next() {
		var i Reminder
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.PersonalNumber,
			&i.User,
			&i.PhoneNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReminder = `-- name: UpdateReminder :one
UPDATE reminders
SET personal_number = $2
WHERE id = $1
RETURNING id, full_name, personal_number, "user", phone_number, created_at
`

type UpdateReminderParams struct {
	ID             int64 `json:"id"`
	PersonalNumber int64 `json:"personal_number"`
}

func (q *Queries) UpdateReminder(ctx context.Context, arg UpdateReminderParams) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, updateReminder, arg.ID, arg.PersonalNumber)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PersonalNumber,
		&i.User,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}
